import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { SPEC_PILOT_CONSTANTS } from "../shared/constants";
import { createLanguagePolicySection } from "../shared/language-policy";
import { resolveStoredLocale } from "../shared/locale";
import { createPromptResponse, joinPromptSections } from "../shared/prompt-factory";

export const registerSpecDesignPrompt = (server: McpServer) => {
  server.registerPrompt(
    "spec.create-design",
    {
      title: "create system design",
      description: "Generate comprehensive system design document from requirements.",
      argsSchema: {
        specName: z
          .string()
          .min(3, "Please provide at least 3 characters for the spec name.")
          .describe(
            "The folder name created by spec.init (slug). Used to locate the spec workspace.",
          ),
      },
    },
    async ({ specName }) => {
      // ロケール解決（設定ファイルの更新のため実行するが、この場所では値は使用しない）
      resolveStoredLocale();

      const prompt = joinPromptSections(
        "# Spec Design Development",
        "",
        createLanguagePolicySection(SPEC_PILOT_CONSTANTS.CONFIG_FILE),
        "",
        "## Inputs",
        `- specName: ${specName}`,
        "- specDescription: (read from config.json and treat as authoritative source)",
        "- requirements: (read from requirements.md and analyze for design implications)",
        "",
        "## Workspace Context",
        `- Base directory: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}\``,
        `- Spec folder path: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}\``,
        `- Mandatory config file: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.SPEC_CONFIG_FILE}\``,
        `- Requirements file to read: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.REQUIREMENTS_FILE}\``,
        `- Design file to create/update: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.DESIGN_FILE}\``,
        "",
        "## Goal",
        "- Transform structured requirements into a comprehensive, implementable system design.",
        "- Generate a design document that enables seamless transition from specification to implementation.",
        "",
        "## Tasks",
        "1. Verify the workspace:",
        `   - Ensure \`${SPEC_PILOT_CONSTANTS.BASE_DIR}\` and \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}\` are directories.`,
        `   - Confirm \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.SPEC_CONFIG_FILE}\` exists, parse as JSON, and capture the current title and description for context.`,
        `   - Verify \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.REQUIREMENTS_FILE}\` exists and read its content for requirements analysis.`,
        "   - Note any mismatches or missing files that could affect design generation.",
        "",
        "2. Analyze requirements:",
        "   - Parse requirements.md to extract functional and non-functional requirements.",
        "   - Determine system scope: Is this extending existing system or creating new system?",
        "   - For existing systems: Focus on minimal integration with current architecture.",
        "   - For new systems: Choose simplest architecture that meets immediate needs.",
        "   - Identify system boundaries, key components, and integration points.",
        "   - Select appropriate architectural patterns based on actual complexity, avoiding over-engineering.",
        "   - Extract technology constraints, performance requirements, and security considerations only when explicitly needed.",
        "",
        "3. Generate design document structure:",
        "   - Create a comprehensive design document with these mandatory sections:",
        "     - `# Design Document`",
        "     - `## Overview` - concise summary of design goals and approach",
        "     - `## Architecture` - system structure and component relationships",
        "     - `## Component Design` - detailed component specifications",
        "     - `## Data Flow` - data movement and processing patterns",
        "     - `## Error Handling Strategy` - error management approach",
        "     - `## Migration Strategy` - implementation phases and steps (without time estimates)",
        "     - `## Test Strategy` - testing approach and coverage",
        "     - `## Performance Considerations` - scalability and optimization",
        "     - `## Security` - security measures and compliance",
        "",
        "4. Create architectural representations:",
        "   - Prioritize Mermaid diagrams for system architecture, data flow, and component interactions.",
        "   - Use ASCII diagrams only when they provide clearer visualization than Mermaid (e.g., simple box layouts).",
        "   - Include directory structures with clear file organization.",
        "   - Show component interaction patterns using appropriate diagram format.",
        "",
        "5. Define implementation details:",
        "   - Specify concrete technology choices with version numbers when relevant.",
        "   - Provide code structure examples for key components.",
        "   - Define API interfaces with request/response formats.",
        "   - Include configuration examples and environment setup.",
        "",
        "6. Ensure design quality:",
        "   - Verify all requirements are addressed in the design.",
        "   - Ensure design is implementable with current technology standards.",
        "   - Check for consistency across all sections.",
        "   - Validate that migration strategy is realistic and phased.",
        "",
        "7. Write the design document:",
        `   - Write to \`${SPEC_PILOT_CONSTANTS.DESIGN_FILE}\` in Markdown format.`,
        "   - Use clear headings, bullet points, and code blocks for readability.",
        "   - Include practical examples and concrete specifications.",
        "   - Ensure each section provides actionable information for developers.",
        "",
        "## Design Document Requirements",
        "- **Overview**: Single paragraph summarizing the design approach and key architectural decisions.",
        "- **Architecture**: System structure with visual diagrams, technology stack, and component relationships.",
        "- **Component Design**: Detailed specifications for each major component including responsibilities and interfaces.",
        "- **Data Flow**: Visual representation of data movement through the system with explanatory text.",
        "- **Error Handling**: Comprehensive error management strategy across all system layers.",
        "- **Migration Strategy**: Phase-by-phase implementation plan with clear deliverables and dependencies. Do not specify time estimates or weekly schedules as implementation timing varies based on team size and experience.",
        "- **Test Strategy**: Testing approach covering unit, integration, and system-level testing.",
        "- **Performance**: Scalability considerations, optimization strategies, and performance metrics.",
        "- **Security**: Security measures, authentication/authorization, and compliance requirements.",
        "",
        "## Quality Standards",
        "- All architectural decisions must be justified based on requirements.",
        "- Code examples must be syntactically correct and follow best practices.",
        "- Visual diagrams must accurately represent system relationships.",
        "- Migration phases must be realistic and account for risk management, but should not include specific time estimates.",
        "- Technical specifications must be detailed enough for implementation.",
        "",
        "## Checks",
        `- Report directory checks for \`${SPEC_PILOT_CONSTANTS.BASE_DIR}\` and \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}\`.`,
        `- Confirm \`${SPEC_PILOT_CONSTANTS.SPEC_CONFIG_FILE}\` was readable and summarize key fields (title, description).`,
        `- Verify \`${SPEC_PILOT_CONSTANTS.REQUIREMENTS_FILE}\` was accessible and summarize requirement count and complexity.`,
        "- Confirm the design document includes all 9 mandatory sections in the correct order.",
        "- Ensure architectural decisions align with extracted requirements.",
        "- Verify all diagrams are properly formatted and meaningful.",
        "- Check that implementation examples are concrete and actionable.",
        `- If writing failed, describe the error and propose next actions (permissions, missing files, invalid content).`,
        "",
        "## Output",
        "- IMPORTANT: Translate all headings, bullet labels, and explanatory text into the resolved output language.",
        "- Keep code fences, paths, identifiers, and technical terms unchanged unless translation improves clarity.",
        "- Maintain consistent terminology throughout the document.",
        "",
        "# Spec Design Result",
        `- specFolder: "${specName}"`,
        `- designFile: "${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.DESIGN_FILE}"`,
        `- workspaceCheck: "<directory, config, and requirements validation summary>"`,
        `- architecturalPattern: "<chosen architectural approach and justification>"`,
        `- componentCount: "<number of major components identified>"`,
        `- implementationComplexity: "<assessment of implementation complexity>"`,
        `- next: "Run @spec.create-tasks ${specName}"`,
        `- notes: "<design decisions, assumptions, or considerations>"`,
        "",
        "- If the workspace is invalid, requirements are missing, or information is insufficient, clearly state what needs to be fixed before retrying.",
      );

      return createPromptResponse(prompt);
    },
  );
};
