import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { SPEC_PILOT_CONSTANTS } from "../shared/constants";
import { createLanguagePolicySection } from "../shared/language-policy";
import { resolveStoredLocale } from "../shared/locale";
import { createPromptResponse, joinPromptSections } from "../shared/prompt-factory";

export const registerSpecTasksPrompt = (server: McpServer) => {
  server.registerPrompt(
    "spec.create-tasks",
    {
      title: "create implementation tasks",
      description:
        "Generate structured implementation tasks from requirements and design documents.",
      argsSchema: {
        specName: z
          .string()
          .min(3, "Please provide at least 3 characters for the spec name.")
          .describe(
            "The folder name created by spec.init (slug). Used to locate the spec workspace.",
          ),
      },
    },
    async ({ specName }) => {
      // ロケール解決（設定ファイルの更新のため実行するが、この場所では値は使用しない）
      resolveStoredLocale();

      const prompt = joinPromptSections(
        "# Spec Tasks Development",
        "",
        createLanguagePolicySection(SPEC_PILOT_CONSTANTS.CONFIG_FILE),
        "",
        "## Inputs",
        `- specName: ${specName}`,
        "- specDescription: (read from config.json and treat as authoritative source)",
        "- requirements: (read from requirements.md and analyze for implementation tasks)",
        "- design: (read from design.md and extract implementation strategy)",
        "",
        "## Workspace Context",
        `- Base directory: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}\``,
        `- Spec folder path: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}\``,
        `- Mandatory config file: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.SPEC_CONFIG_FILE}\``,
        `- Requirements file to read: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.REQUIREMENTS_FILE}\``,
        `- Design file to read: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.DESIGN_FILE}\``,
        `- Tasks file to create/update: \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.TASKS_FILE}\``,
        "",
        "## Goal",
        "- Transform requirements and design documents into actionable, testable implementation tasks.",
        "- Generate a structured task list that enables step-by-step development with clear progress tracking.",
        "",
        "## Tasks",
        "1. Verify the workspace:",
        `   - Ensure \`${SPEC_PILOT_CONSTANTS.BASE_DIR}\` and \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}\` are directories.`,
        `   - Confirm \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.SPEC_CONFIG_FILE}\` exists, parse as JSON, and capture the current title and description for context.`,
        `   - Verify \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.REQUIREMENTS_FILE}\` exists and read its content for requirements analysis.`,
        `   - Verify \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.DESIGN_FILE}\` exists and read its content for design analysis.`,
        "   - Note any mismatches or missing files that could affect task generation.",
        "",
        "2. Analyze requirements and design:",
        "   - Parse requirements.md to extract functional requirements and acceptance criteria (EARS statements).",
        "   - Analyze design.md to identify implementation components, architecture decisions, and technical stack.",
        "   - Extract migration strategy phases from design document for task sequencing.",
        "   - Identify dependencies between components and determine optimal implementation order.",
        "   - Map requirements to design components for traceability.",
        "",
        "3. Generate implementation task hierarchy:",
        "   - Break down the implementation into major phases based on design migration strategy.",
        "   - For each phase, create detailed tasks following appropriate development methodology.",
        "   - Structure tasks hierarchically with numbered subsections (1, 1.1, 1.2, 2, 2.1, etc.).",
        "   - Ensure each task is concrete, testable, and completable within a reasonable timeframe.",
        "   - Include specific technical details (library versions, configuration parameters, etc.).",
        "",
        "4. Apply task formatting standards:",
        "   - Use checkbox format: `- [ ]` for incomplete tasks, `- [x]` for completed tasks (all start as incomplete).",
        "   - Structure each task with: task number, descriptive title, bullet points for sub-activities.",
        "   - Include requirement traceability linking tasks to their corresponding requirements.",
        "   - Apply testing strategy as specified in the design document's test strategy section.",
        "   - Add technical specifications (library versions, configuration details, API endpoints).",
        "",
        "5. Create task document structure:",
        "   - Generate tasks.md with the following mandatory sections:",
        "     - `# Implementation Plan`",
        "     - `## Completed Tasks` - initially empty with 'None'",
        "     - `## Implementation Tasks` - hierarchical task list",
        "   - Organize tasks by implementation phases derived from design migration strategy.",
        "   - Ensure logical dependency order within and between phases.",
        "",
        "6. Ensure task quality:",
        "   - Verify all requirements from requirements.md are covered by implementation tasks.",
        "   - Check that tasks align with architectural decisions from design.md.",
        "   - Ensure testing approach aligns with the design document's test strategy.",
        "   - Validate that task descriptions are specific enough for implementation.",
        "   - Confirm requirement traceability is complete and accurate.",
        "",
        "## Task Structure Guidelines",
        "- **Major Phase Tasks**: Represent significant implementation milestones (foundation, core features, integration).",
        "- **Sub-tasks**: Break down major tasks into specific, actionable items (max 2-3 hours each).",
        "- **Testing Integration**: Follow the testing strategy outlined in the design document.",
        "- **Technical Detail**: Include specific versions, configuration parameters, and implementation notes.",
        "- **Dependencies**: Clearly indicate task dependencies through logical ordering.",
        "- **Requirement Mapping**: Every task must trace back to specific requirements.",
        "",
        "## Quality Standards",
        "- Each task must be actionable and completable by a developer.",
        "- Tasks should include enough technical detail for implementation without being overwhelming.",
        "- Testing approach must align with the design document's test strategy section.",
        "- All functional requirements must be covered by corresponding implementation tasks.",
        "- Task hierarchy should reflect natural development workflow and dependencies.",
        "",
        "## Checks",
        `- Report directory checks for \`${SPEC_PILOT_CONSTANTS.BASE_DIR}\` and \`${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}\`.`,
        `- Confirm \`${SPEC_PILOT_CONSTANTS.SPEC_CONFIG_FILE}\` was readable and summarize key fields (title, description).`,
        `- Verify \`${SPEC_PILOT_CONSTANTS.REQUIREMENTS_FILE}\` was accessible and summarize requirement count.`,
        `- Verify \`${SPEC_PILOT_CONSTANTS.DESIGN_FILE}\` was accessible and summarize design components.`,
        "- Confirm tasks.md includes all 3 mandatory sections in the correct order.",
        "- Ensure all requirements are traced to implementation tasks.",
        "- Verify task hierarchy follows logical implementation dependencies.",
        "- Check that testing approach follows the design document's test strategy.",
        `- If writing failed, describe the error and propose next actions (permissions, missing files, invalid content).`,
        "",
        "## Output",
        "- IMPORTANT: Translate all headings, bullet labels, and explanatory text into the resolved output language.",
        "- Keep code fences, paths, identifiers, and technical terms unchanged unless translation improves clarity.",
        "- Apply appropriate section headings based on the resolved output language.",
        "",
        "# Spec Tasks Result",
        `- specFolder: "${specName}"`,
        `- tasksFile: "${SPEC_PILOT_CONSTANTS.BASE_DIR}/${specName}/${SPEC_PILOT_CONSTANTS.TASKS_FILE}"`,
        `- workspaceCheck: "<directory, config, requirements, and design validation summary>"`,
        `- taskCount: "<total number of implementation tasks generated>"`,
        `- phaseCount: "<number of implementation phases identified>"`,
        `- requirementCoverage: "<percentage or summary of requirements covered>"`,
        `- implementationApproach: "<development methodology and testing approach applied>"`,
        `- next: "<recommended follow-up action or development start point>"`,
        `- notes: "<implementation considerations, assumptions, or dependencies>"`,
        "",
        "- If the workspace is invalid, requirements are missing, design is incomplete, or information is insufficient, clearly state what needs to be fixed before retrying.",
      );

      return createPromptResponse(prompt);
    },
  );
};
