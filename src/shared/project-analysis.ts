import { joinPromptSections } from "./prompt-factory";

export const createProjectAnalysisSection = (workingDirectory = '.') => {
  return joinPromptSections(
    "## Project Context Analysis",
    "- **IMPORTANT**: Before generating any design or implementation, analyze the existing project structure to ensure compatibility and follow established patterns.",
    "",
    "### Project Discovery",
    `- Examine the project root directory: \`${workingDirectory}\``,
    "- Identify the primary programming language(s) used",
    "- Detect project type (web app, CLI tool, library, microservice, desktop app, mobile app, etc.)",
    "- Determine if this is a monorepo, multi-package, or single-project structure",
    "",
    "### Technology Stack Detection",
    "- **Configuration files**: Look for language-specific config files:",
    "  - JavaScript/TypeScript: package.json, tsconfig.json, vite.config.js, webpack.config.js",
    "  - Python: pyproject.toml, setup.py, requirements.txt, Pipfile, poetry.lock",
    "  - Rust: Cargo.toml, Cargo.lock",
    "  - Go: go.mod, go.sum",
    "  - Java: pom.xml, build.gradle, gradle.properties",
    "  - C#: *.csproj, *.sln, Directory.Build.props",
    "  - Ruby: Gemfile, *.gemspec",
    "  - PHP: composer.json, composer.lock",
    "",
    "- **Framework identification**: Based on dependencies and file structure, identify:",
    "  - Web frameworks (React, Vue, Angular, Django, Flask, Spring, Rails, etc.)",
    "  - Testing frameworks and tools",
    "  - Build systems and bundlers",
    "  - Database and ORM solutions",
    "",
    "### Code Organization Analysis",
    "- **Directory structure**: Identify common patterns:",
    "  - Source code location (src/, lib/, app/, main/, etc.)",
    "  - Test directory structure and naming conventions",
    "  - Configuration and environment files location",
    "  - Documentation and assets organization",
    "",
    "- **Naming conventions**: Analyze existing code for:",
    "  - File and directory naming patterns",
    "  - Function/method naming style",
    "  - Variable and constant naming conventions",
    "  - Module/package naming patterns",
    "",
    "### Development Workflow Analysis",
    "- **Build and deployment**: Identify build scripts, CI/CD configurations",
    "- **Development tools**: Linters, formatters, pre-commit hooks",
    "- **Testing strategy**: Unit tests, integration tests, test runners",
    "- **Documentation**: README patterns, inline documentation style",
    "",
    "### Integration Compatibility",
    "- Determine where new components should be placed within existing structure",
    "- Identify version constraints and dependency compatibility requirements",
    "- Note any architectural patterns or design principles being followed",
    "- Assess impact on existing code and required modifications"
  );
};